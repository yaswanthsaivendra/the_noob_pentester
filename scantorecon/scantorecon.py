#!/usr/bin/env python3
import random
from ipaddress import IPv4Network
import sys
import os
import requests
import argparse
from scapy.all import sr1, ARP, Ether, srp
from scapy.layers.inet import IP, ICMP, TCP, UDP
import logging 
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

if os.geteuid() != 0 :
    print("As we are going to use raw sockets in this tool, you can only run this tool as a superuser. Try using sudo.")
    sys.exit(0)


host = None
timeout = 1
ports = []
tcp_ports = [20,21,22,23,25,53,80,110,111,115,135,139,143,161,162,194,389,443,445,992,993,995,1723,3306,3389,5900,8080]
udp_ports = [53,67,68,69,88,161,162,389]

def tcp_syn_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1(
            IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="S"),
            timeout=dst_timeout,verbose=0
        )
        if resp is None:
            print(f"TCP SYN SCAN {dst_host}:{dst_port} is filtered")
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x12 :
                #sending RST flag to dst port
                sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="R"),
            timeout=dst_timeout,verbose=0
                )
                print(f"TCP SYN SCAN {dst_host}:{dst_port} is open")
            elif resp.getlayer(TCP).flags == 0x14 :
                print(f"TCP SYN SCAN {dst_host}:{dst_port} is closed")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"{dst_host}:{dst_port} is filtered")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)

def tcp_conn_scan(dst_host,dst_port,dst_timeout):
    try:   
        src_port = random.randint(1025,65534)
        resp = sr1(
            IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="S"),
            timeout=dst_timeout,verbose=0
        )
        if resp is None:
            print(f"TCP CONNECT SCAN {dst_host}:{dst_port} is filtered")  
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x12 :
                #sending RST flag to dst port
                sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="AR"),
            timeout=dst_timeout,verbose=0
                )
                print(f"TCP CONNECT SCAN {dst_host}:{dst_port} is open")
            elif resp.getlayer(TCP).flags == 0x14 :
                print(f"TCP CONNECT SCAN {dst_host}:{dst_port} is closed")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)   


def tcp_ack_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="A"),
            timeout=dst_timeout,verbose=0
                )
        if resp is None:
            print(f"TCP ACK SCAN stateful firewall present(Filtered)") 
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x4 :
                print("TCP ACK SCAN No Firewall(unfiltered)")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"TCP ACK SCAN stateful firewall present(Filtered)")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)
        
def tcp_xmas_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="FPU"),
            timeout=dst_timeout,verbose=0
                )
        
        if resp is None:
            print(f"TCP XMAS SCAN {dst_host}:{dst_port} is open|filtered.")
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x14:
                print(f"TCP XMAS SCAN {dst_host}:{dst_port} is closed.")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"TCP XMAS SCAN {dst_host}:{dst_port} is filtered.")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)


def tcp_fin_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="F"),
            timeout=dst_timeout,verbose=0
                )
        
        if resp is None:
            print(f"TCP FIN SCAN {dst_host}:{dst_port} is open|filtered.")
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x14:
                print(f"TCP FIN SCAN {dst_host}:{dst_port} is closed.")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"TCP FIN SCAN {dst_host}:{dst_port} is filtered.")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)


def tcp_null_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags=""),
            timeout=dst_timeout,verbose=0
                )
        if resp is None:
            print(f"TCP NULL SCAN {dst_host}:{dst_port} is open|filtered.")
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).flags == 0x14:
                print(f"TCP NULL SCAN {dst_host}:{dst_port} is closed.")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"TCP NULL SCAN {dst_host}:{dst_port} is filtered.")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0) 


def tcp_window_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/TCP(sport=src_port,dport=dst_port,flags="A"),
            timeout=dst_timeout,verbose=0
                )
        if resp is None:
            print(f"TCP WINDOW SCAN {dst_host}:{dst_port} is filtered.")
        elif resp.haslayer(TCP):
            if resp.getlayer(TCP).window == 0:
                print(f"TCP WINDOW SCAN {dst_host}:{dst_port} is closed.")
            elif resp.getlayer(TCP).window > 0:
                print(f"TCP WINDOW SCAN {dst_host}:{dst_port} is open.")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type) == 3 and int(resp.getlayer(ICMP).code) in [1,2,3,9,10,13] :
                print(f"TCP WINDOW SCAN {dst_host}:{dst_port} is filtered.")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)
    


def udp_scan(dst_host,dst_port,dst_timeout):
    try:
        src_port = random.randint(1025,65534)
        resp = sr1( IP(dst=dst_host)/UDP(sport=src_port,dport=dst_port,),
            timeout=dst_timeout,verbose=0
                )
        if resp is None:
            resp = sr1( IP(dst=dst_host)/UDP(sport=src_port,dport=dst_port,),
            timeout=dst_timeout,verbose=0
                    )
            if resp is None:
                resp = sr1( IP(dst=dst_host)/UDP(sport=src_port,dport=dst_port,),
            timeout=dst_timeout,verbose=0
                )
                if resp is None:
                    
                    print(f"UDP SCAN {dst_host}:{dst_port} is open|filtered.")
                elif resp.haslayer(UDP):
                    print(f"UDP SCAN {dst_host}:{dst_port} is open.")
                elif resp.haslayer(ICMP):
                    if int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code)==3:
                        print(f"UDP SCAN {dst_host}:{dst_port} is closed.")
                    elif int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,9,10,13]:
                        print(f"UDP SCAN {dst_host}:{dst_port} is filtered.")
                
            elif resp.haslayer(UDP):
                print(f"UDP SCAN {dst_host}:{dst_port} is open.")
            elif resp.haslayer(ICMP):
                if int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code)==3:
                    print(f"UDP SCAN {dst_host}:{dst_port} is closed.")
                elif int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,9,10,13]:
                    print(f"UDP SCAN {dst_host}:{dst_port} is filtered.")
    
        elif resp.haslayer(UDP):
            print(f"UDP SCAN {dst_host}:{dst_port} is open.")
        elif resp.haslayer(ICMP):
            if int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code)==3:
                print(f"UDP SCAN {dst_host}:{dst_port} is closed.")
            elif int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,9,10,13]:
                print(f"UDP SCAN {dst_host}:{dst_port} is filtered.")
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)

            
def icmp_ping_scan(network,dst_timeout):
    addresses = IPv4Network(network)
    try:
        for host in addresses:
            try:
                resp = sr1(
                    IP(dst=str(host))/ICMP(),timeout=dst_timeout,verbose=0
                )

                if resp is None:
                    pass
                elif int(resp.getlayer(ICMP).type)==3 and int(resp.getlayer(ICMP).code) in [1,2,9,10,13]:
                    pass
                else:
                    print(f"{host} is up")
            except KeyboardInterrupt:
                print("keyboard interrupt")
                sys.exit(0)
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)

def arp_scan(dst_host,dst_timeout):
    try:
        ans, unans = srp( Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=dst_host),
            timeout=dst_timeout,verbose=0
                )
        for sent,received in ans:
            if received:
                print(f"MAC: {received.hwsrc}")
            else :
                pass
    except KeyboardInterrupt:
        print("keyboard interrupt")
        sys.exit(0)            

def banner():
    print(""" 
  _______  _______  _______  _         _________ _______    _______  _______  _______  _______  _       
(  ____ \(  ____ \(  ___  )( (    /|  \__   __/(  ___  )  (  ____ )(  ____ \(  ____ \(  ___  )( (    /|
| (    \/| (    \/| (   ) ||  \  ( |     ) (   | (   ) |  | (    )|| (    \/| (    \/| (   ) ||  \  ( |
| (_____ | |      | (___) ||   \ | |     | |   | |   | |  | (____)|| (__    | |      | |   | ||   \ | |
(_____  )| |      |  ___  || (\ \) |     | |   | |   | |  |     __)|  __)   | |      | |   | || (\ \) |
      ) || |      | (   ) || | \   |     | |   | |   | |  | (\ (   | (      | |      | |   | || | \   |
/\____) || (____/\| )   ( || )  \  |     | |   | (___) |  | ) \ \__| (____/\| (____/\| (___) || )  \  |
\_______)(_______/|/     \||/    )_)     )_(   (_______)  |/   \__/(_______/(_______/(_______)|/    )_)
                                                                                                       
    """)
    print(f"Default tcp ports used in tcp scans: {tcp_ports}")
    print(f"""Default udp ports used in udp scans: {udp_ports}
    
    """)
    

    

    

def argsparser():

    global host, timeout, ports, tcp_ports, udp_ports, fileobj

    parser = argparse.ArgumentParser(description=banner())
    parser.add_argument("host", help="Target host to scan",)
    parser.add_argument("-sT", "--conn-scan", help="Perform a TCP CONNECT scan",
                        action="store_true", dest="conn_scan")
    parser.add_argument("-sS", "--syn-scan", help="Perform a TCP SYN (Stealth) scan",
                        action="store_true", dest="syn_scan")
    parser.add_argument("-sA", "--ack-scan", help="Perform a TCP ACK scan",
                        action="store_true", dest="ack_scan")
    parser.add_argument("-sX", "--xmas-scan", help="Perform a TCP XMAS scan",
                        action="store_true", dest="xmas_scan")
    parser.add_argument("-sF", "--fin-scan", help="Perform a TCP FIN scan",
                        action="store_true", dest="fin_scan")
    parser.add_argument("-sN", "--null-scan", help="Perform a TCP NULL scan",
                        action="store_true", dest="null_scan")
    parser.add_argument("-sW", "--window-scan", help="Perform a TCP WINDOW scan",
                        action="store_true", dest="window_scan")
    parser.add_argument("-sU", "--udp-scan", help="Perform a UDP scan",
                        action="store_true", dest="udp_scan")
    parser.add_argument("-Arp", "--arp-scan", help="Perform a ARP scan",
                        action="store_true", dest="arp_scan")
    parser.add_argument("-Pn", "--ping-sweep", help="Perform a ICMP PING sweep over a network of ip addresses. This option should be used alone without using any other scan technquies and while using this the host should be replaced with CIDR notation of network. EX: 192.168.1.0/24",
                        action="store_true", dest="ping_sweep")
    parser.add_argument("-A", "--agressive-scan", help="Perform a agressive scan. Enable all scan techniques with one single switch(ARP scan and PING sweep are excluded).",
                        action="store_true", dest="arv_scan")
    parser.add_argument("-t", "--timeout", help="Timeout between each request, by default it is set to 1 second.", type=int,choices=[0,1,2,3,4],
                        default=1, dest="timeout")
    parser.add_argument("-p","--port", help="To scan a single port(by default only common ports will be scanned). EX: -p 22",type=int,
                         dest="port",metavar="")
    parser.add_argument("-pl","--ports", help="To scan list of ports seperated by commas(by default only common ports will be scanned). EX: -pl 22,23,43,8080",
                         dest="ports",metavar="")
    parser.add_argument("-pr","--portrange", help="To scan a range of ports(by default only common ports will be scanned). EX: -pr 141-143",
                         dest="portrange",metavar="")
    parser.add_argument("-o", "--outputfile", help="save the output to a file, Instead of displaying the ouput on terminal scan results will be saved into a file in current directory.",
                         dest="output_file",metavar="")
    


    args = parser.parse_args()

    timeout = args.timeout

    if args.output_file:
        fileobj = open(args.output_file,"w")
        sys.stdout = fileobj

    if args.ping_sweep:
        ipnetwork = args.host
        icmp_ping_scan(ipnetwork,timeout)
    else:
        host = args.host

    
    
      
        
    if args.arp_scan:
        arp_scan(host,timeout)

    

    if args.ports:
        ports_str = args.ports.split(",")
        for i in range(len(ports_str)):
            port_int = int(ports_str[i])
            ports.append(port_int)
    if args.portrange:
        portrange = args.portrange.split("-")
        start = int(portrange[0])
        end = int(portrange[1])+1
        for port in range(start,end):
            ports.append(port)
    

    


    

    validarg = (args.conn_scan or args.syn_scan or args.ack_scan or args.xmas_scan or args.fin_scan or args.null_scan or args.window_scan or args.arv_scan or args.udp_scan or args.ping_sweep or args.arp_scan)
    if not validarg:
        parser.error("Specify at least one of [-sT, -sS, -sA, -sX, -sF, -sN, -sW, -sU, -A, -Pn, -Arp]")
    else:
        try:
            if args.port:
                try:
                    if args.conn_scan:
                        tcp_conn_scan(host,args.port,timeout)
                    if args.syn_scan:
                        tcp_syn_scan(host,args.port,timeout)
                    if args.ack_scan:
                        tcp_ack_scan(host,args.port,timeout)
                    if args.xmas_scan:
                        tcp_xmas_scan(host,args.port,timeout)
                    if args.fin_scan:
                        tcp_fin_scan(host,args.port,timeout)
                    if args.window_scan:
                        tcp_window_scan(host,args.port,timeout)
                    if args.null_scan:
                        tcp_null_scan(host,args.port,timeout)
                    if args.udp_scan:
                        udp_scan(host,args.port,timeout)
                    if args.arv_scan:
                        tcp_conn_scan(host,args.port,timeout)
                        tcp_syn_scan(host,args.port,timeout)
                        tcp_ack_scan(host,args.port,timeout)
                        tcp_xmas_scan(host,args.port,timeout)
                        tcp_fin_scan(host,args.port,timeout)
                        tcp_null_scan(host,args.port,timeout)
                        tcp_window_scan(host,args.port,timeout)
                        udp_scan(host,args.port,timeout)
                except KeyboardInterrupt:
                    print("keyboard interrupt")
                    sys.exit(0)
            elif args.ports or args.portrange:
                for port in ports:
                    try:
                        if args.conn_scan:
                            tcp_conn_scan(host,port,timeout)
                        if args.syn_scan:
                            tcp_syn_scan(host,port,timeout)
                        if args.ack_scan:
                            tcp_ack_scan(host,port,timeout)
                        if args.xmas_scan:
                            tcp_xmas_scan(host,port,timeout)
                        if args.fin_scan:
                            tcp_fin_scan(host,port,timeout)
                        if args.window_scan:
                            tcp_window_scan(host,port,timeout)
                        if args.null_scan:
                            tcp_null_scan(host,port,timeout)
                        if args.udp_scan:
                            udp_scan(host,port,timeout)
                        if args.arv_scan:
                            tcp_conn_scan(host,port,timeout)
                            tcp_syn_scan(host,port,timeout)
                            tcp_ack_scan(host,port,timeout)
                            tcp_xmas_scan(host,port,timeout)
                            tcp_fin_scan(host,port,timeout)
                            tcp_null_scan(host,port,timeout)
                            tcp_window_scan(host,port,timeout)
                            udp_scan(host,port,timeout)
                    except KeyboardInterrupt:
                        print("keyboard interrupt")
                        sys.exit(0)
            else:
                for port in tcp_ports:
                    try:
                        if args.conn_scan:
                            tcp_conn_scan(host,port,timeout)
                        if args.syn_scan:
                            tcp_syn_scan(host,port,timeout)
                        if args.ack_scan:
                            tcp_ack_scan(host,port,timeout)
                        if args.xmas_scan:
                            tcp_xmas_scan(host,port,timeout)
                        if args.fin_scan:
                            tcp_fin_scan(host,port,timeout)
                        if args.window_scan:
                            tcp_window_scan(host,port,timeout)
                        if args.null_scan:
                            tcp_null_scan(host,port,timeout)
                        if args.arv_scan:
                            tcp_conn_scan(host,port,timeout)
                            tcp_syn_scan(host,port,timeout)
                            tcp_ack_scan(host,port,timeout)
                            tcp_xmas_scan(host,port,timeout)
                            tcp_fin_scan(host,port,timeout)
                            tcp_null_scan(host,port,timeout)
                            tcp_window_scan(host,port,timeout)
                    except KeyboardInterrupt:
                        print("keyboard interrupt")
                        sys.exit(0)
                for port in udp_ports:
                    try:
                        if args.udp_scan:
                            udp_scan(host,port,timeout)
                        if args.arv_scan:
                            udp_scan(host,port,timeout)
                    except KeyboardInterrupt:
                        print("keyboard interrupt")
                        sys.exit(0)
        except KeyboardInterrupt:
            print("keyboard interrupt")
            sys.exit(0)    
    if args.output_file:
            fileobj.close()
            


if __name__ == "__main__":
        argsparser()
         
        
    
   
   










